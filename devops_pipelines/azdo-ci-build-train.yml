pr: none
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/
    - environment_setup/

variables:
- template: azdo-variables.yml
- group: devopsforai-aml-vg


stages:
- stage: 'Model_CI'
  displayName: 'Model CI'
  jobs:
  - job: "Model_CI_Pipeline"
    displayName: "Model CI Pipeline"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - template: azdo-base-pipeline.yml
    - task: AzureCLI@1
      displayName: 'Publish Azure Machine Learning Pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          # Invoke the Python building and publishing a training pipeline
          python3 $(Build.SourcesDirectory)/ml_pipelines/${{ variables.BUILD_TRAIN_SCRIPT }}
- stage: 'Trigger_AML_Pipeline'
  displayName: 'Train, evaluate, register model via previously published AML pipeline'
  jobs:
  - job: "Get_Pipeline_ID"
    condition: and(succeeded(), eq(coalesce(variables['auto-trigger-training'], 'true'), 'true'))
    displayName: "Get Pipeline ID for execution"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      name: 'getpipelineid'
      displayName: 'Run Azure ML Pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          set -x
          pipeline_id_file=$(mktemp)
          python $(Build.SourcesDirectory)/ml_pipelines/run_train_pipeline.py --output_pipeline_id_file "$pipeline_id_file" --skip_train_execution
          echo "PIPELINE FILE"
          ls -la $pipeline_id_file
          echo "CONTENTS"
          cat $pipeline_id_file
          echo "END PIPELINE FILE"
          echo "##vso[task.setvariable variable=AMLPIPELINEID;isOutput=true]$(cat $pipeline_id_file)"
          rm "$pipeline_id_file"
  - job: "Run_ML_Pipeline"
    dependsOn: "Get_Pipeline_ID"
    displayName: "Trigger ML Training Pipeline"
    pool: server
    variables:
      AMLPIPELINE_ID: $[ dependencies.Get_Pipeline_ID.outputs['getpipelineid.AMLPIPELINEID'] ]
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-restApi-task.MLPublishedPipelineRestAPITask@0
      displayName: 'Invoke ML pipeline'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        PipelineId: '$(AMLPIPELINE_ID)'
        ExperimentName: '$(EXPERIMENT_NAME)'
        PipelineParameters: '"model_name": "$(MODEL_NAME)"'
  - job: "Training_Run_Report"
    dependsOn: "Run_ML_Pipeline"
    displayName: "Determine if evaluation succeeded and new model is registered"
    pool:
      vmImage: 'ubuntu-latest'
    container: mcr.microsoft.com/mlops/python:latest
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      displayName: 'Check if new model registered'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          python $(Build.SourcesDirectory)/ml_pipelines/verify_train_pipeline.py --build_id $(Build.BuildId) --model_name "$(MODEL_NAME)"
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        Contents: |
          code/scoring/**
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        ArtifactName: 'mlops-pipelines'
        publishLocation: 'container'
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        TargetPath: '$(Build.ArtifactStagingDirectory)'
